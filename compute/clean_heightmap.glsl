# version 430

layout(local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

// TODO Make these uniforms
const int EXTENTS = 16;                         // Extents of SDF block, in distance units
const int DIVISIOINS = 16;                       // Cells per distance unit
const int   HMAP_EXTENTS = EXTENTS*DIVISIOINS;     // Extents of SDF block, in number of cells

// Kernel navigation constants
const int K_SIZE = 13;
const int K_SIZE_2 = K_SIZE*K_SIZE;
const int K_SIZE_1_2 = int((K_SIZE-1)*0.5);
const float K_SIZE_INV = 1.0/K_SIZE;

layout(location = 0) uniform ivec3 sdf_index;
layout(std430, binding = 1) volatile buffer sdf { float sdf_buffer[256][256]; };
layout(std430, binding = 3) volatile buffer score { float score_buffer[256][256]; };

float kernel[K_SIZE][K_SIZE] = {
    {6.575891439694331 ,6.63898280786306 ,6.691052995377067 ,6.731834211237977 ,6.761115740687348 ,6.778745758717932 ,6.784632641334409 ,6.778745758717932 ,6.761115740687348 ,6.731834211237977 ,6.691052995377067 ,6.63898280786306 ,6.575891439694331 ,},
    {6.63898280786306 ,6.702679496355873 ,6.755249263189458 ,6.7964217480863365 ,6.825984214618075 ,6.843783381115995 ,6.849726744512595 ,6.843783381115995 ,6.825984214618075 ,6.7964217480863365 ,6.755249263189458 ,6.702679496355873 ,6.63898280786306 ,},
    {6.691052995377067 ,6.755249263189458 ,6.808231339814438 ,6.849726744512595 ,6.879521072343004 ,6.89745983943396 ,6.903449817207414 ,6.89745983943396 ,6.879521072343004 ,6.849726744512595 ,6.808231339814438 ,6.755249263189458 ,6.691052995377067 ,},
    {6.731834211237977 ,6.7964217480863365 ,6.849726744512595 ,6.891475059037859 ,6.921450979947193 ,6.93949908180706 ,6.945525567821704 ,6.93949908180706 ,6.921450979947193 ,6.891475059037859 ,6.849726744512595 ,6.7964217480863365 ,6.731834211237977 ,},
    {6.761115740687348 ,6.825984214618075 ,6.879521072343004 ,6.921450979947193 ,6.9515572874322125 ,6.969683893308893 ,6.975736592792583 ,6.969683893308893 ,6.9515572874322125 ,6.921450979947193 ,6.879521072343004 ,6.825984214618075 ,6.761115740687348 ,},
    {6.778745758717932 ,6.843783381115995 ,6.89745983943396 ,6.93949908180706 ,6.969683893308893 ,6.9878577654062255 ,6.993926247669729 ,6.9878577654062255 ,6.969683893308893 ,6.93949908180706 ,6.89745983943396 ,6.843783381115995 ,6.778745758717932 ,},
    {6.784632641334409 ,6.849726744512595 ,6.903449817207414 ,6.945525567821704 ,6.975736592792583 ,6.993926247669729 ,7.0 ,6.993926247669729 ,6.975736592792583 ,6.945525567821704 ,6.903449817207414 ,6.849726744512595 ,6.784632641334409 ,},
    {6.778745758717932 ,6.843783381115995 ,6.89745983943396 ,6.93949908180706 ,6.969683893308893 ,6.9878577654062255 ,6.993926247669729 ,6.9878577654062255 ,6.969683893308893 ,6.93949908180706 ,6.89745983943396 ,6.843783381115995 ,6.778745758717932 ,},
    {6.761115740687348 ,6.825984214618075 ,6.879521072343004 ,6.921450979947193 ,6.9515572874322125 ,6.969683893308893 ,6.975736592792583 ,6.969683893308893 ,6.9515572874322125 ,6.921450979947193 ,6.879521072343004 ,6.825984214618075 ,6.761115740687348 ,},
    {6.731834211237977 ,6.7964217480863365 ,6.849726744512595 ,6.891475059037859 ,6.921450979947193 ,6.93949908180706 ,6.945525567821704 ,6.93949908180706 ,6.921450979947193 ,6.891475059037859 ,6.849726744512595 ,6.7964217480863365 ,6.731834211237977 ,},
    {6.691052995377067 ,6.755249263189458 ,6.808231339814438 ,6.849726744512595 ,6.879521072343004 ,6.89745983943396 ,6.903449817207414 ,6.89745983943396 ,6.879521072343004 ,6.849726744512595 ,6.808231339814438 ,6.755249263189458 ,6.691052995377067 ,},
    {6.63898280786306 ,6.702679496355873 ,6.755249263189458 ,6.7964217480863365 ,6.825984214618075 ,6.843783381115995 ,6.849726744512595 ,6.843783381115995 ,6.825984214618075 ,6.7964217480863365 ,6.755249263189458 ,6.702679496355873 ,6.63898280786306 ,},
    {6.575891439694331 ,6.63898280786306 ,6.691052995377067 ,6.731834211237977 ,6.761115740687348 ,6.778745758717932 ,6.784632641334409 ,6.778745758717932 ,6.761115740687348 ,6.731834211237977 ,6.691052995377067 ,6.63898280786306 ,6.575891439694331 ,},
};

float calculate_score(uint x, uint y)
{
    // Gradient score
    uint ym = uint(mod(y, HMAP_EXTENTS));
    uint xm = uint(mod(x, HMAP_EXTENTS));
    uint ym1 = uint(mod(y-1, HMAP_EXTENTS));
    uint xm1 = uint(mod(x-1, HMAP_EXTENTS));
    uint yp1 = uint(mod(y+1, HMAP_EXTENTS));
    uint xp1 = uint(mod(x+1, HMAP_EXTENTS));

    float g_x = 0.5*(sdf_buffer[xm1][ym1]   - sdf_buffer[xp1][ym1]
                    +2*sdf_buffer[xm1][ym]  - 2*sdf_buffer[xp1][ym]
                    +sdf_buffer[xm1][yp1]   - sdf_buffer[xp1][yp1]);
    
    float g_y = 0.5*(sdf_buffer[xm1][ym1]   + 2*sdf_buffer[xm][ym1]     + sdf_buffer[xp1][ym1]
                    -sdf_buffer[xm1][yp1]   - 2*sdf_buffer[xm][yp1]     - sdf_buffer[xp1][yp1]);

    float steepness_score = sqrt(g_x*g_x + g_y*g_y);


    // Proximity score
    float prox_score = 0.0;
    // nested loops are funky here
    for(int i=0; i<K_SIZE_2; i++)
    {   
        int iroll = int(i*(K_SIZE_INV));
        int jroll = int(mod(i, K_SIZE));
        prox_score += kernel[iroll][jroll]*(sdf_buffer[x-K_SIZE_1_2+iroll][y-K_SIZE_1_2+jroll] - sdf_buffer[x][y]);
    }
    prox_score = abs(prox_score/(K_SIZE_2));
    return prox_score + steepness_score;
}


void main()
{
    uint x = gl_GlobalInvocationID.x;
    uint y = gl_GlobalInvocationID.y;
    score_buffer[x][y] = calculate_score(x,y);
    if  ( HMAP_EXTENTS-sdf_index.x == x ||   HMAP_EXTENTS-sdf_index.y == y)
    {
        sdf_buffer[x][y] = 0.0;
    }
}